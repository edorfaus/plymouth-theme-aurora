# Plymouth splash script that draws a moving aurora on a starfield
# Copyright (C) 2011 Frode Austvik
# License: GNU GPL version 2 or later

rays.image = Image("ray-green.png");
rays.width = 3;//rays.image.GetWidth();
rays.wantedCount = 100;
rays.zIndex = -10;
rays.minOpacity = 0.75;
rays.maxOpacity = 1;

logo.display = 1;
logo.zIndex = 0;
logo.fadeFrequency = 0; // In Hz, 0 means no fading
logo.minOpacity = 0.3;
logo.maxOpacity = 1; // Also used as initial opacity
if (logo.display) {
	//logo.image = Image("special://logo");
	logo.image = Image("logo.png");
}

stars.display = 1;
stars.wantedCount = 100;
stars.zIndex = -100;
stars.minOpacity = 0.2;
stars.maxOpacity = 0.7;
if (stars.display) {
	stars.image=Image.Text(".", 1, 1, 1, 1, "Fixed");
	stars.image=stars.image.Scale(
		stars.image.GetWidth(),
		stars.image.GetHeight()/2
	);
}

Window.SetBackgroundTopColor(0.1, 0.1, 0.2);
Window.SetBackgroundBottomColor(0, 0, 0.1);

// ---- End of settings ---- //

if (Plymouth.GetMode()=="shutdown" || Plymouth.GetMode()=="suspend") {
	progress.bootProgress=1;
} else {
	progress.bootProgress=0;
}

if (logo.display) {
	logo.sprite=Sprite(logo.image);
	logo.opacityAngle=0;
	logo.sprite.SetOpacity(logo.maxOpacity);
	logo.Center=fun() {
		logo.sprite.SetPosition(
			Window.GetX()+Window.GetWidth()/2-logo.image.GetWidth()/2,
			Window.GetY()+Window.GetHeight()/2-logo.image.GetHeight()/2,
			logo.zIndex
		);
	};
	logo.Center();
}

if (stars.display) {
	for(i=0;i<stars.wantedCount;i++) {
		stars[i]=Sprite(stars.image);
		stars[i].SetPosition(
			Window.GetX()+Window.GetWidth()*Math.Random(),
			Window.GetY()+Window.GetHeight()*Math.Random(),
			stars.zIndex
		);
		local.opacity=Math.Random();
		opacity*=(stars.maxOpacity-stars.minOpacity);
		opacity+=stars.minOpacity;
		stars[i].SetOpacity(opacity);
	}
}

yTopMin=Window.GetHeight()/16;
yTopMax=Window.GetHeight()/4;
yBottomMin=Window.GetHeight()*3/4;
yBottomMax=yBottomMin+Window.GetHeight()*4/6;

rays.currentCount=0;

fun checkLineCount() {
	local.i=0;
	if (rays.currentCount<rays.wantedCount) {
		if (rays.currentCount<1) {
			local.yTop=Math.Random()*Window.GetHeight()/4;
			local.yBottom=Math.Random()*Window.GetHeight()/8+Window.GetHeight()*3/4;
			rays[0].x=Math.Random()*Window.GetWidth()/16;
			rays[0].yTop=yTop;
			rays[0].yBottom=yBottom;
			rays[0].sprite=Sprite(rays.image.Scale(rays.width, yBottom-yTop));
			rays[0].sprite.SetPosition(
				Window.GetX()+Math.Int(rays[0].x),
				Window.GetY()+Math.Int(rays[0].yTop),
				rays.zIndex
			);
			local.opacity=Math.Random();
			opacity*=(rays.maxOpacity-rays.minOpacity);
			opacity+=rays.minOpacity;
			rays[0].sprite.SetOpacity(opacity);
			rays.currentCount++;
		}
		for(i=rays.currentCount;i<rays.wantedCount;i++) {
			local.yTop=rays[i-1].yTop+(Math.Random()-0.5)*3;
			local.yBottom=rays[i-1].yBottom+(Math.Random()-0.5);
			if (yTop<yTopMin) yTop=yTopMin;
			if (yTop>yTopMax) yTop=yTopMax;
			if (yBottom<yBottomMin) yBottom=yBottomMin;
			if (yBottom>yBottomMax) yBottom=yBottomMax;
			rays[i].x=rays[i-1].x+rays.width*Math.Random();
			rays[i].yTop=yTop;
			rays[i].yBottom=yBottom;
			rays[i].sprite=Sprite(rays.image.Scale(rays.width, yBottom-yTop));
			rays[i].sprite.SetPosition(
				Window.GetX()+Math.Int(rays[i].x),
				Window.GetY()+Math.Int(rays[i].yTop),
				rays.zIndex
			);
			local.opacity=Math.Random();
			opacity*=(rays.maxOpacity-rays.minOpacity);
			opacity+=rays.minOpacity;
			rays[i].sprite.SetOpacity(opacity);
			rays.currentCount++;
		}
		// Scale all the x values so the aurora takes up half the screen.
		local.scaleFactor=Window.GetWidth()/2-rays.width;
		scaleFactor/=rays[rays.currentCount-1].x+rays.width;
		for(i=0;i<rays.currentCount;i++) {
			rays[i].x *= scaleFactor;
			rays[i].sprite.SetX(
				Window.GetX()+Math.Int(rays[i].x)
			);
		}
	}
}

fun moveLines() {
	// TODO: move the y positions too, not just x
	local.maxX=Window.GetWidth()/2-rays.width;
	local.startX=Window.GetX()+progress.bootProgress*Window.GetWidth()/2;
	for(local.i=0;i<rays.currentCount;i++) {
		local.newX=rays[i].x+Math.Random()-0.5;
		if (Math.Int(newX)<0) {
			newX=0;
		}
		if (Math.Int(newX)>maxX) {
			newX=maxX;
		}
		rays[i].x=newX;
		rays[i].sprite.SetX(startX+Math.Int(newX));
	}
}

// This variable is used to limit the refresh rate, because this script is
// rather heavy (it has hundreds of sprites, most with opacity, many moving).
doRefresh=0;

fun refresh_callback () {
	if (logo.fadeFrequency>0) {
		// This assumes that refresh will be called ~ 50 times per second
		logo.opacityAngle += ((2*3.14)/50)*logo.fadeFrequency;
	}
	doRefresh++;
	if (doRefresh>=0) {
		doRefresh=-20;
		if (rays.currentCount<rays.wantedCount) {
			checkLineCount();
		}
		moveLines();
		if (logo.fadeFrequency>0) {
			local.opacity = (Math.Cos(logo.opacityAngle)+1)/2;
			opacity *= logo.maxOpacity - logo.minOpacity;
			opacity += logo.minOpacity;
			logo.sprite.SetOpacity(opacity);
		}
	}
}
Plymouth.SetRefreshFunction(refresh_callback);

progress.prevTime=0;

fun boot_progress_callback(time, bootProgress) {
	local.mode=Plymouth.GetMode();
	if (mode=="shutdown" || mode=="suspend") {
		progress.bootProgress=1-bootProgress;
	} else {
		progress.bootProgress=bootProgress;
	}
	if (progress.prevTime+0.15<time) {
		fadetext.Update(time);
		progress.prevTime=time;
		doRefresh=0;
	}
	fadetext.lastKnownTime=time;
}
Plymouth.SetBootProgressFunction(boot_progress_callback);

# -------- dialog -------- #

dialog.setup=fun() {
	if (dialog.setup.done) {
		return;
	}
	
	local.box;
	local.lock;
	local.entry;
	local.prompt;
	local.text;
	
	dialog.box=box;
	dialog.lock=lock;
	dialog.entry=entry;
	dialog.prompt=prompt;
	dialog.text=text;
	
	dialog.bullets.image=Image("bullet.png");

	box.image=Image("box.png");
	lock.image=Image("lock.png");
	entry.image=Image("entry.png");

	box.sprite=Sprite(box.image);
	box.x=Window.GetX()+Window.GetWidth()/2-box.image.GetWidth()/2;
	box.y=Window.GetY()+Window.GetHeight()/2-box.image.GetHeight()/2;
	box.z=10000;
	box.sprite.SetPosition(box.x, box.y, box.z);
	
	lock.sprite=Sprite(lock.image);
	lock.x=box.x+box.image.GetWidth()/2
		-(lock.image.GetWidth()+entry.image.GetWidth())/2
	;
	lock.y=box.y+box.image.GetHeight()/2-lock.image.GetHeight()/2;
	lock.z=box.z+1;
	lock.sprite.SetPosition(lock.x, lock.y, lock.z);
	
	entry.sprite=Sprite(entry.image);
	entry.x=lock.x+lock.image.GetWidth();
	entry.y=box.y+box.image.GetHeight()/2-entry.image.GetHeight()/2;
	entry.z=box.z+1;
	entry.sprite.SetPosition(entry.x, entry.y, entry.z);
	
	dialog.top=Math.Min(box.y, lock.y, entry.y);
	
	prompt.sprite=Sprite();
	prompt.SetText=fun(text) {
		local.prompt=dialog.prompt;
		local.box=dialog.box;
		prompt.image=Image.Text(text, 1, 1, 1);
		prompt.sprite.SetImage(prompt.image);
		prompt.sprite.SetPosition(
			box.x+(box.image.GetWidth()-prompt.image.GetWidth())/2,
			box.y+box.image.GetHeight()+2,
			box.z+1
		);
	};
	
	text.sprite=Sprite();
	text.SetText=fun(string) {
		local.text=dialog.text;
		local.entry=dialog.entry;
		text.image=Image.Text(string, 0, 0, 0);
		text.sprite.SetImage(text.image);
		text.sprite.SetPosition(
			entry.x+2,
			entry.y+(entry.image.GetHeight()-text.image.GetHeight())/2,
			entry.z+1
		);
	};
	
	dialog.sprites[0]=box.sprite;
	dialog.sprites[1]=lock.sprite;
	dialog.sprites[2]=entry.sprite;
	dialog.sprites[3]=prompt.sprite;
	dialog.sprites[4]=text.sprite;
	
	dialog.setup.done=1;
};

dialog.Hide=fun() {
	if (dialog.setup.done) {
		local.i;
		for (i=0;dialog.sprites[i];i++) {
			dialog.sprites[i].SetOpacity(0);
		}
		for (i=0;dialog.bullets[i];i++) {
			dialog.bullets[i].SetOpacity(0);
		}
	}
	logo.Center();
};

dialog.Show=fun(prompt, bulletCount, text) {
	if (!prompt) prompt="";
	if (!text) text="";
	
	dialog.setup();
	dialog.prompt.SetText(prompt);
	dialog.text.SetText(text);
	
	local.logoY=dialog.top-logo.image.GetHeight();
	if (logoY>Window.GetY()) {
		logoY=(logoY-Window.GetY())/2+Window.GetY();
	}
	logo.sprite.SetY(logoY);
	
	local.i;
	for (i=0;dialog.sprites[i];i++) {
		dialog.sprites[i].SetOpacity(1);
	}
	
	local.bullets=dialog.bullets;
	local.entry=dialog.entry;
	for(i=0;i<bulletCount;i++) {
		if (!bullets[i]) {
			bullets[i]=Sprite(bullets.image);
			bullets[i].SetPosition(
				entry.x+2+(bullets.image.GetWidth()+2)*i,
				entry.y+(entry.image.GetHeight()-bullets.image.GetHeight())/2,
				dialog.entry.z+1
			);
		}
		bullets[i].SetOpacity(1);
	}
	for(i=i;bullets[i];i++) {
		bullets[i].SetOpacity(0);
	}
};

Plymouth.SetDisplayNormalFunction(dialog.Hide);
Plymouth.SetDisplayPasswordFunction(fun(prompt, bulletCount) {
	dialog.Show(prompt, bulletCount, "");
});
Plymouth.SetDisplayQuestionFunction(fun(prompt, text) {
	dialog.Show(prompt, 0, text);
});

# -------- status messages -------- #

fadetext.lastKnownTime=0;

fadetext.Update=fun(time) {
	local.i;
	for(i=0;fadetext.list[i];i++) {
		if (fadetext.list[i].timeout<0) {
			// The timeout is set negative until here, for two reasons:
			// - we don't really have the current time in the Add method
			// - this ensures the message is not hidden before it's displayed
			fadetext.list[i].timeout=time-fadetext.list[i].timeout;
		}
		if (fadetext.list[i].active && fadetext.list[i].timeout<time) {
			local.opacity=fadetext.list[i].timeout+1-time;
			if (opacity<=0) {
				fadetext.list[i].sprite.SetOpacity(0);
				fadetext.list[i].active=0;
				fadetext.list[i].sprite=undefined;
				fadetext.list[i].image=undefined;
			} else {
				fadetext.list[i].sprite.SetOpacity(opacity);
			}
		}
	}
};

fadetext.Add=fun(text, timeout) {
	if (!text || text=="") return;
	fadetext.list[-1].image=Image.Text(text, 1, 1, 1);
	fadetext.list[-1].sprite=Sprite(fadetext.list[-1].image);
	fadetext.list[-1].active=1;
	fadetext.list[-1].timeout=-timeout; // Negative for a reason, see Update
	fadetext.list[-1].sprite.SetPosition(
		Window.GetX(),
		Window.GetY()+Window.GetHeight(),
		5000
	);
	local.height=fadetext.list[-1].image.GetHeight();
	local.i;
	// Find the first unused position
	for(i=0;fadetext.list[i] && fadetext.list[i].active;i++) {}
	// Move everything up
	for(i=i;i>=0;i--) {
		fadetext.list[i]=fadetext.list[i-1];
		fadetext.list[i].sprite.SetY(fadetext.list[i].sprite.GetY()-height);
	}
	fadetext.list[-1]=undefined;
};

Plymouth.SetUpdateStatusFunction(fun(text){ fadetext.Add(text, 5); });
Plymouth.SetMessageFunction(fun(text){ fadetext.Add(text, 10); });

Plymouth.SetRootMountedFunction(fun(){ fadetext.Add("Root (re)mounted.", 2); });

